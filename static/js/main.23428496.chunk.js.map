{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","textDecoration","Header","style","to","TodoItem","getStyle","backgroundColor","borderBottom","props","todo","completed","this","id","title","type","onChange","toggleComplete","bind","onClick","delTodo","btnStyle","Component","border","borderRadius","cursor","float","Todos","todos","map","key","AddTodo","state","changeStateTitle","e","setState","target","value","onSubmitForm","preventDefault","addTodo","onSubmit","display","name","placeholder","flex","className","About","Fragment","App","axios","delete","then","reponse","filter","post","response","data","get","exact","path","render","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.23428496.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n\treturn (\n\t\t<header style={headerStyle}>\n\t\t\t<h1>TodoList</h1>\n\t\t\t{/* Like an <a href='/'></a> */}\n\t\t\t<Link style={linkStyle} to='/React-TodoList'>\n\t\t\t\tHome\n\t\t\t</Link>{' '}\n\t\t\t|{' '}\n\t\t\t<Link style={linkStyle} to='/React-TodoList/about'>\n\t\t\t\tAbout\n\t\t\t</Link>\n\t\t</header>\n\t);\n}\n\nconst headerStyle = {\n\tbackground: '#333',\n\tcolor: '#fff',\n\ttextAlign: 'center',\n\tpadding: '10px',\n};\n\nconst linkStyle = {\n\tcolor: '#fff',\n\ttextDecoration: 'none',\n};\n\nexport default Header;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends Component {\n    getStyle = () => {\n        // Return an object that contains al the styles for each todo item\n        return {    \n            backgroundColor: '#f4f4f4',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted',\n            // If the item is completed put a line-through\n            textDecoration: this.props.todo.completed ? \n            'line-through' : 'none'\n        }\n    };\n\n    // To be able to access the state of the app(where we have the todos array, which contains all the todo items and its properties), we need to 'go up' in the components 'list'\n    // Going up one level, we reach the Todo component, which contains the todo items. But the information that we wanna change(the completed property) it isn't there, so we go up one more level\n    // Now we have reached the app main component(contains all other components in our program). We can access the state of the app and change it, meaning we can change the property 'completed' of each todo item\n    // TodoItem => Todos => App\n    // We create methods inside the properties and call them\n    \n    render() {  \n        // Destructuring the this.props object\n        const {id, title} = this.props.todo;\n        \n        return (\n            <div style={this.getStyle()}>\n                <p>\n                    {/* Add a checkbox, and some space between it and the item */}\n                    {/* Add an event for the change on checkbox */}\n                    {/* Bind the 'this' and 'id' to the markComplete property so that in App.js(where is the state) we know which item we are changing the 'completed' property */}\n                    <input type='checkbox' onChange={this.props.toggleComplete.bind(this, id)} /> {''}\n                    {title}\n                    <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>x</button>\n                </p>\n            </div>\n        )\n    }\n}\n\n// Defining the kind of property for each todo item\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired\n}\n\n// Using inline style\n// <div style={{backgroundColor: '#f4f4f4'}}>\n\n// Using style with variables\nconst btnStyle = {\n    backgroundColor: '#ff0000',\n    color: '#fff',\n    border: 'none',\n    padding: '5px 9px',\n    borderRadius: '50%',\n    cursor: 'pointer',\n    float: 'right'\n};\n\n// Defining the kind of property for the todo items\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired,\n    toggleComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired\n}\n\nexport default TodoItem","import React, { Component } from 'react';\nimport TodoItem from './TodoItem'\nimport PropTypes from 'prop-types';\n\nclass Todos extends Component {\n  render() {\n    // Access the properties this.props.todos\n    const todosProps = this.props.todos\n    \n    /* Add a property to the component, called todo, that contains the item passed as argument from map */\n    return todosProps.map(todo => <TodoItem key={todo.id} todo={todo} toggleComplete={this.props.toggleComplete} delTodo={this.props.delTodo} />);\n  }\n}\n\n// Defining the kind of property for the todos\nTodos.propTypes = {\n  todos: PropTypes.array.isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  delTodo: PropTypes.func.isRequired\n}\n\nexport default Todos;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n// Component with its own state\nexport class AddTodo extends Component {\n    // Add a state for the form\n    state = {\n        title: ''\n    }\n\n    // Set the this.state.title to whatever the user is typing on the input form\n    changeStateTitle = (e) => this.setState({ title: e.target.value });\n\n    // If we had more values to change (example: email, phone, etc), we can use: \n    // onChange = (e) => this.setState({ [e.target.name]: e.target.value });\n    // This way we don't need to create a separate function for each input\n\n    onSubmitForm = (e) => {\n        e.preventDefault();\n        // Pass what was typed to the App main component to create a new todo item\n        this.props.addTodo(this.state.title);\n        // Clear the form\n        this.setState({ title: '' });\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmitForm} style={{display: 'flex'}}>\n                <input \n                    type='text' \n                    name='title' \n                    placeholder='Add Todo ...' \n                    style={{flex: '10', padding: '5px'}}\n                    value={this.state.title}\n                    onChange={this.changeStateTitle}    \n                >\n                </input>\n                <input\n                    type='submit' \n                    value='Submit' \n                    className='btn' \n                    style={{flex: '1'}}>\n                </input>\n            </form>\n        )\n    }\n}\n\n// // Defining the kind of property for add todo item\nAddTodo.propTypes = {\n    addTodo: PropTypes.func.isRequired\n}\n\n\nexport default AddTodo\n","import React from 'react'\n\n// IS a completely different page, it won't show with the list\n\nfunction About() {\n    return (\n        <React.Fragment>\n            <h1>About</h1>\n            <p>This is the TodoList app v1.0.0. It is part of a React crash course</p>\n        </React.Fragment>\n    )\n}\n\nexport default  About;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Header from './components/layout/Header';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\n// uuid has no export default, so import everything under the name 'uuid'\n// import * as uuid from 'uuid';\n// For HTTP requests\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n\t// Add state to the main app component\n\t// todos is an array of objects containing the todo items\n\tstate = {\n\t\ttodos: [],\n\t};\n\n\t// Make initial request - runs right after the component mounts\n\tcomponentDidMount() {\n\t\t// Returns a promise, that resolves to a response with the property data, which contains the requested data\n\t\t// Limiting it to 10 items\n\t\taxios\n\t\t\t.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n\t\t\t.then((response) => this.setState({ todos: response.data }));\n\t\t// Added to the todos array on the state\n\t}\n\n\ttoggleComplete = (id) => {\n\t\t// Change the state of the App\n\t\t// Iterate through the todos array inside the state object\n\t\t// Find the item we clicked on and change its state\n\t\tthis.setState({\n\t\t\ttodos: this.state.todos.map((todo) => {\n\t\t\t\tif (todo.id === id) {\n\t\t\t\t\ttodo.completed = !todo.completed;\n\t\t\t\t}\n\n\t\t\t\treturn todo;\n\t\t\t}),\n\t\t});\n\t};\n\n\t// Delete todo item\n\tdelTodo = (id) => {\n\t\taxios\n\t\t\t.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n\t\t\t.then((reponse) =>\n\t\t\t\tthis.setState({\n\t\t\t\t\ttodos: this.state.todos.filter((todo) =>\n\t\t\t\t\t\ttodo.id === id ? false : true\n\t\t\t\t\t),\n\t\t\t\t})\n\t\t\t);\n\t};\n\n\t// Create new todo item\n\taddTodo = (title) => {\n\t\t// Make a post request to the server to add our new todo item\n\t\taxios\n\t\t\t.post('https://jsonplaceholder.typicode.com/todos', {\n\t\t\t\ttitle,\n\t\t\t\tcompleted: false,\n\t\t\t})\n\t\t\t.then((response) =>\n\t\t\t\tthis.setState({ todos: [...this.state.todos, response.data] })\n\t\t\t);\n\t\t// Add item to App state\n\t\t// ...this.state.todos => copying what we already have\n\t};\n\n\trender() {\n\t\t// Access state: this.state.todos\n\n\t\treturn (\n\t\t\t// This is JSX\n\t\t\t<Router>\n\t\t\t\t<div className='App'>\n\t\t\t\t\t<div className='container'>\n\t\t\t\t\t\t<Header />\n\n\t\t\t\t\t\t{/* \n              Add a Route that is just a single component\n              path='/' => index, home\n             */}\n\t\t\t\t\t\t{/* The TodoList page as a component */}\n\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\texact\n\t\t\t\t\t\t\tpath='/React-TodoList'\n\t\t\t\t\t\t\trender={(props) => (\n\t\t\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t\t\t<AddTodo addTodo={this.addTodo} />\n\t\t\t\t\t\t\t\t\t{/* \n                  Embed a component inside the main app\n                  Add a property to the component, called todos, that's the todos array inside the state\n                */}\n\t\t\t\t\t\t\t\t\t<Todos\n\t\t\t\t\t\t\t\t\t\ttodos={this.state.todos}\n\t\t\t\t\t\t\t\t\t\ttoggleComplete={this.toggleComplete}\n\t\t\t\t\t\t\t\t\t\tdelTodo={this.delTodo}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t{/* The About page as a component */}\n\t\t\t\t\t\t<Route path='/React-TodoList/about' component={About} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// Main app component, wraps around everything\nimport App from './App';\n\n// Rendering the main app component to the root element(div)\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}